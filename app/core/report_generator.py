"""
Report generation module for the Multimodal AI Medical Diagnosis System.

This module generates formatted reports based on the medical image analysis 
and diagnosis results.
"""
import os
import json
import logging
from datetime import datetime
from pathlib import Path

# Set up logging
logger = logging.getLogger(__name__)

def generate_report(analysis_results, patient_info=None, report_dir=None):
    """
    Generate a comprehensive medical report from analysis results.
    
    Args:
        analysis_results: Dictionary containing analysis and diagnosis results
        patient_info: Optional dictionary with patient information
        report_dir: Directory to save the report (defaults to current directory)
        
    Returns:
        str: Path to the generated report
        
    Raises:
        Exception: If an error occurs during report generation
    """
    try:
        # Set default report directory if not provided
        if report_dir is None:
            report_dir = os.path.join(os.getcwd(), "reports")
        
        # Create reports directory if it doesn't exist
        os.makedirs(report_dir, exist_ok=True)
        
        # Generate timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Create report filename
        report_filename = f"Medical_Report_{timestamp}.txt"
        report_path = os.path.join(report_dir, report_filename)
        
        # Current date in formatted style
        formatted_date = datetime.now().strftime("%B %d, %Y %H:%M:%S")
        
        # Extract data from results
        image_filename = analysis_results.get("image_filename", "Unknown")
        analysis = analysis_results.get("analysis", "No analysis data")
        symptoms = analysis_results.get("symptoms", "No symptoms provided")
        diagnosis = analysis_results.get("diagnosis", "No diagnosis generated")
        
        # Write the report
        with open(report_path, "w") as report_file:
            report_file.write(f"""
{'='*80}
                    MULTIMODAL AI MEDICAL ANALYSIS REPORT
                          FOR EDUCATIONAL PURPOSES
{'='*80}

Date of Report: {formatted_date}
Image ID: {image_filename}

DISCLAIMER: 
This report is generated using artificial intelligence and is intended for 
educational purposes only. It should NOT be used for clinical diagnosis or 
medical decision-making. All findings must be verified by licensed healthcare 
professionals.

{'='*80}

PATIENT INFORMATION:
{'~'*40}
""")
            
            # Add patient info if provided
            if patient_info:
                for key, value in patient_info.items():
                    report_file.write(f"{key}: {value}\n")
            else:
                report_file.write("No patient information provided\n")
                
            report_file.write(f"""
REPORTED SYMPTOMS:
{'~'*40}
{symptoms}

IMAGE ANALYSIS RESULTS:
{'~'*40}
{analysis}

AI-SUGGESTED ASSESSMENT:
{'~'*40}
{diagnosis}

{'='*80}

REPORT AUTHENTICATION
{'~'*40}
Generated by: Multimodal AI Medical Diagnosis System
Date: {formatted_date}
Report ID: {timestamp}

NOTE: This report is intended for educational and research purposes only.
The findings and interpretations are AI-generated and should not be used
for actual medical diagnosis or treatment decisions.

{'='*80}
""")
        
        logger.info(f"Report generated successfully: {report_path}")
        return report_path
        
    except Exception as e:
        error_msg = f"Error generating report: {str(e)}"
        logger.error(error_msg)
        raise Exception(error_msg)

def generate_batch_report(batch_results, report_dir=None):
    """
    Generate a comprehensive report from batch analysis results.
    
    Args:
        batch_results: List of result dictionaries
        report_dir: Directory to save the report
        
    Returns:
        str: Path to the generated report
    """
    try:
        # Set default report directory if not provided
        if report_dir is None:
            report_dir = os.path.join(os.getcwd(), "reports")
        
        # Create reports directory if it doesn't exist
        os.makedirs(report_dir, exist_ok=True)
        
        # Generate timestamp
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # Create report filename
        report_filename = f"Batch_Medical_Report_{timestamp}.txt"
        report_path = os.path.join(report_dir, report_filename)
        
        # Current date in formatted style
        formatted_date = datetime.now().strftime("%B %d, %Y %H:%M:%S")
        
        # Write the report
        with open(report_path, "w") as report_file:
            report_file.write(f"""
{'='*80}
                MULTIMODAL AI MEDICAL BATCH ANALYSIS REPORT
                          FOR EDUCATIONAL PURPOSES
{'='*80}

Date of Report: {formatted_date}
Total Cases: {len(batch_results)}

DISCLAIMER: 
This report is generated using artificial intelligence and is intended for 
educational purposes only. It should NOT be used for clinical diagnosis or 
medical decision-making. All findings must be verified by licensed healthcare 
professionals.

{'='*80}

SUMMARY OF ANALYSES:
""")
            
            # Process each case
            for i, result in enumerate(batch_results, 1):
                report_file.write(f"""
CASE {i}
{'~'*40}
Image ID: {result.get('image_name', 'Unknown')}
Date Processed: {result.get('processed_at', 'Unknown')}

RADIOLOGICAL OBSERVATIONS:
------------------------""")
                
                # Write findings if available
                findings = result.get('findings', {})
                if findings:
                    for obj in findings.get('objects', []):
                        report_file.write(f"\n• {obj}")
                    for feature in findings.get('features', []):
                        report_file.write(f"\n• {feature}")
                else:
                    report_file.write("\nNo observations available")
                
                report_file.write(f"""

MEDICAL INTERPRETATION:
---------------------
{result.get('interpretation', 'No interpretation available')}

{'='*80}
""")
            
            # Write footer
            report_file.write(f"""
REPORT AUTHENTICATION
--------------------
Generated by: Multimodal AI Medical Diagnosis System
Date: {formatted_date}
Report ID: {timestamp}

NOTE: This report is intended for educational and research purposes only.
The findings and interpretations are AI-generated and should not be used
for actual medical diagnosis or treatment decisions.

{'='*80}
""")
        
        logger.info(f"Batch report generated successfully: {report_path}")
        return report_path
        
    except Exception as e:
        error_msg = f"Error generating batch report: {str(e)}"
        logger.error(error_msg)
        raise Exception(error_msg)